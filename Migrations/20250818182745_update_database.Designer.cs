// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using fortest.Services;

#nullable disable

namespace fortest.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250818182745_update_database")]
    partial class update_database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("fortest.Models.NewTable", b =>
                {
                    b.Property<int>("lora_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("lora_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("lora_id"));

                    b.Property<string>("assigned_to")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("assigned_to");

                    b.Property<string>("cor_supply")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("lora_serial")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("lora_serial");

                    b.Property<string>("note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("note");

                    b.Property<string>("plate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("plate");

                    b.Property<string>("receipt_rv")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("refference")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("refference");

                    b.Property<string>("status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("taken_date")
                        .HasColumnType("datetime2")
                        .HasColumnName("taken_date");

                    b.Property<string>("users")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("users");

                    b.HasKey("lora_id");

                    b.ToTable("new_table");
                });

            modelBuilder.Entity("fortest.Models.TblHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MreaderId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReaderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RfmId")
                        .HasColumnType("int");

                    b.Property<string>("RfmMac")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HistoryId");

                    b.HasIndex("MreaderId");

                    b.HasIndex("RfmId");

                    b.ToTable("TblHistory");
                });

            modelBuilder.Entity("fortest.Models.TblMreader", b =>
                {
                    b.Property<int>("MId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("MReaderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadingArea")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MId");

                    b.ToTable("TblMreader");
                });

            modelBuilder.Entity("fortest.Models.TblPlate", b =>
                {
                    b.Property<int>("plate_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("plate_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("plate_id"));

                    b.Property<string>("cor_supply")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("cor_supply");

                    b.Property<DateTime?>("date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("if_deleted")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("if_deleted ");

                    b.Property<string>("note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("note");

                    b.Property<int?>("quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("ref_user")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ref_user");

                    b.Property<string>("refference")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("refference");

                    b.Property<string>("status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("status");

                    b.HasKey("plate_id");

                    b.ToTable("tblPlates");
                });

            modelBuilder.Entity("fortest.Models.TblRfm", b =>
                {
                    b.Property<int>("RfmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RfmId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MreaderId")
                        .HasColumnType("int");

                    b.Property<string>("RfmMac")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RfmId");

                    b.HasIndex("MreaderId");

                    b.ToTable("TblRfms");
                });

            modelBuilder.Entity("fortest.Models.TblUser", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"));

                    b.Property<DateTime?>("date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("fullname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fullname");

                    b.Property<string>("passWord")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("passWord");

                    b.Property<string>("recoveryAnswer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("recoveryAnswer");

                    b.Property<string>("recoveryQuestion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("recoveryQuestion");

                    b.Property<string>("userName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("userName");

                    b.Property<string>("userStatus")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("userStatus");

                    b.Property<string>("usertype")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("usertype");

                    b.HasKey("user_id");

                    b.ToTable("TblUser");
                });

            modelBuilder.Entity("fortest.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuditUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("fortest.Models.tblLora", b =>
                {
                    b.Property<int>("lora_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("lora_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("lora_id"));

                    b.Property<string>("assigned_to")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("assigned_to");

                    b.Property<string>("cor_supply")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("if_deleted")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("if_deleted ");

                    b.Property<string>("lora_serial")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("lora_serial");

                    b.Property<string>("note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("note");

                    b.Property<string>("plate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("plate");

                    b.Property<string>("receipt_rv")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ref_user")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ref_user");

                    b.Property<string>("refference")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("refference");

                    b.Property<string>("status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("taken_date")
                        .HasColumnType("datetime2")
                        .HasColumnName("taken_date");

                    b.HasKey("lora_id");

                    b.ToTable("tblLora");
                });

            modelBuilder.Entity("fortest.Models.TblHistory", b =>
                {
                    b.HasOne("fortest.Models.TblMreader", "Mreader")
                        .WithMany("TblHistories")
                        .HasForeignKey("MreaderId");

                    b.HasOne("fortest.Models.TblRfm", "Rfm")
                        .WithMany("TblHistories")
                        .HasForeignKey("RfmId");

                    b.Navigation("Mreader");

                    b.Navigation("Rfm");
                });

            modelBuilder.Entity("fortest.Models.TblRfm", b =>
                {
                    b.HasOne("fortest.Models.TblMreader", "Mreader")
                        .WithMany("TblRfms")
                        .HasForeignKey("MreaderId");

                    b.Navigation("Mreader");
                });

            modelBuilder.Entity("fortest.Models.TblMreader", b =>
                {
                    b.Navigation("TblHistories");

                    b.Navigation("TblRfms");
                });

            modelBuilder.Entity("fortest.Models.TblRfm", b =>
                {
                    b.Navigation("TblHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
